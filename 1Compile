
-- creating a library to read files
LIBNAME libName BASE "path/data"; ** does not need a run statement at the end
/* BASE keyword is not needed, it is for reading SAS data. For other input sources ,we write EXCEL/SQL etc.
libname xlRead xlsx "path/folder1/folder2/filename.xlsx"
options validvarname= v7 --- enforces naming convention of SAS 7
proc contents data=xlRead.sheetName; -- reads the correct sheet
run; 
LIBNAME xlRead clear;  -- clear the library data  

-- Work library is temporary, files deleted at end of session; default setting
data= work.tablename;
data=tablename

-- Sample table
options validvarname = v7; -- to ensure data column names follow the norms
libname df1 xlsx "path/f1/f2/file.xlsx"; --- path to the file, df1 is the library name, xlsx is the type of data we want to import
proc contents data = df1.sheet_name; -- all sheets will be read as separate tables in the df1 library folder
run;  -- if run not added here, the next line to clear gets an error, that the library is being used
libname df1 clear; -- makes sense to clear data source not needed

-- importing data
proc import datafile="path/filename" dbms=filetype out=output-table-name <replace>;
<guessingrows = n|max;>
run;

-- importing csv
proc import datafile="path/folder/file.csv" dbms= csv
out=df_name_to_be_created replace;  /* replace ensures if the program is run more than once, the df is simply replaced
run;

proc contents data= df_name_to_be_created;
run;

proc import datafile="folder/data/filename.tab"
            dbms=tab out=df_tab;
run;
/*if we re-run the import option without replace in syntax, we get the below message
"NOTE: Import cancelled.  Output dataset WORK.STORM_DAMAGE_TAB already exists.  Specify REPLACE option to overwrite it."

proc import datafile="folder/data/filename.tab"
            dbms=tab out=df_tab replace;
run;


--- importing excel ( https://www.coursera.org/learn/sas-programming-basics/lecture/MF6Gv/importing-an-excel-file)
proc import datafile = "path/file_name.xlsx" dbms= xlsx
out= output_df_name <replace>;
sheet= sheet_name;
run;

--- xlsx libname v/s proc import
libname reads directly from file, reads current data | proc import creates a copy of the data, data to be reimported if there are changes in data

--- avoiding truncation while reading data
proc import datafile= "path/filename.csv" dbms=csv
out=df_name replace;
guessingrows=max; ** adding guessingrows ensures no truncation. it is to be added after the ";" for proc import syntax
run;

proc contents data = df_name; ***  data is a part of the syntax, and is required
run;


--- SAS documentation
https://documentation.sas.com/doc/en/pgmsascdc/9.4_3.5/allprodsproc/procedures.htm
https://documentation.sas.com/doc/en/pgmsascdc/9.4_3.5/proc/p10qiuo2yicr4qn17rav8kptnjpu.htm


---- Validating Data --------------------------------------

--- proc print
proc print data= df_name (obs=5); ** shows all rows by default, hence, you select your choice of records to print. in that aspect, similar to head;
run;

-- to subset a few columns + seeing top 5 records, 
proc print data= df_name (obs=5);
var col1 col2 col5 col9;
run;

/* the column names need not be separated by comma. if you know the names, you can type them, do so
otherwise, select column names in the desired order (ctrl+ click) from the SAS table explorer, and then drag them */
shortcut to add a comment . select the text to be commented and press ctrl+/

/* calculates summary statistics*/
proc means data=df_name;
run;
var col1 col2; /* only numeric cols*/

/* more details of the data (extreme values etc.)*/
proc univariate data = df_name;
var col1, col2;
run;

/* frequency..unique values .. similar to table in R? */
proc freq data=df_name;
tables col5, col6; ---- TABLES keyword and NOT var here
run;

-------WHERE---------
Date comparison, format - "2-jan-18"d or "02JAN2018"d

proc print data=libraryName.fileName(obs=50);
	where col1 is missing; /*same as col1 = .*/
	where col2 is not missing; /*same as col2 ne " "*/
	where col3 between 150 and 155;
	where col4 like "_I"; * second letter is I, two char in col4;
            where col5 like 'Z%;  * first letter is Z
run;
