
-- creating a library to read files
LIBNAME libName BASE "path/data"; ** does not need a run statement at the end
/* BASE keyword is not needed, it is for reading SAS data. For other input sources ,we write EXCEL/SQL etc.
libname xlRead xlsx "path/folder1/folder2/filename.xlsx"
options validvarname= v7 --- enforces naming convention of SAS 7
proc contents data=xlRead.sheetName; -- reads the correct sheet
run; 
LIBNAME xlRead clear;  -- clear the library data  

-- Work library is temporary, files deleted at end of session; default setting
data= work.tablename;
data=tablename

-- Sample table
options validvarname = v7; -- to ensure data column names follow the norms
libname df1 xlsx "path/f1/f2/file.xlsx"; --- path to the file, df1 is the library name, xlsx is the type of data we want to import
proc contents data = df1.sheet_name; -- all sheets will be read as separate tables in the df1 library folder
run;  -- if run not added here, the next line to clear gets an error, that the library is being used
libname df1 clear; -- makes sense to clear data source not needed

-- importing data
proc import datafile="path/filename" dbms=filetype out=output-table-name <replace>;
<guessingrows = n|max;>
run;

-- importing csv
proc import datafile="path/folder/file.csv" dbms= csv
out=df_name_to_be_created replace;  /* replace ensures if the program is run more than once, the df is simply replaced
run;

proc contents data= df_name_to_be_created;
run;

proc import datafile="folder/data/filename.tab"
            dbms=tab out=df_tab;
run;
/*if we re-run the import option without replace in syntax, we get the below message
"NOTE: Import cancelled.  Output dataset WORK.STORM_DAMAGE_TAB already exists.  Specify REPLACE option to overwrite it."

proc import datafile="folder/data/filename.tab"
            dbms=tab out=df_tab replace;
run;


--- importing excel ( https://www.coursera.org/learn/sas-programming-basics/lecture/MF6Gv/importing-an-excel-file)
proc import datafile = "path/file_name.xlsx" dbms= xlsx
out= output_df_name <replace>;
sheet= sheet_name;
run;

--- xlsx libname v/s proc import
libname reads directly from file, reads current data | proc import creates a copy of the data, data to be reimported if there are changes in data

--- avoiding truncation while reading data
proc import datafile= "path/filename.csv" dbms=csv
out=df_name replace;
guessingrows=max; ** adding guessingrows ensures no truncation. it is to be added after the ";" for proc import syntax
run;

proc contents data = df_name; ***  data is a part of the syntax, and is required
run;


--- SAS documentation
https://documentation.sas.com/doc/en/pgmsascdc/9.4_3.5/allprodsproc/procedures.htm
https://documentation.sas.com/doc/en/pgmsascdc/9.4_3.5/proc/p10qiuo2yicr4qn17rav8kptnjpu.htm


---- Validating Data --------------------------------------

--- proc print
proc print data= df_name (obs=5); ** shows all rows by default, hence, you select your choice of records to print. in that aspect, similar to head;
run;

-- to subset a few columns + seeing top 5 records, 
proc print data= df_name (obs=5);
var col1 col2 col5 col9;
run;

/* the column names need not be separated by comma. if you know the names, you can type them, do so
otherwise, select column names in the desired order (ctrl+ click) from the SAS table explorer, and then drag them */
shortcut to add a comment . select the text to be commented and press ctrl+/

/* calculates summary statistics*/
proc means data=df_name;
run;
var col1 col2; /* only numeric cols*/

/* more details of the data (extreme values etc.)*/
proc univariate data = df_name;
var col1, col2;
run;

/* frequency..unique values .. similar to table in R? */
proc freq data=df_name;
tables col5, col6; ---- TABLES keyword and NOT var here
run;

-------WHERE---------
Date comparison, format - "2-jan-18"d or "02JAN2018"d

proc print data=libraryName.fileName(obs=50);
	where col1 is missing; /*same as col1 = .*/
	where col2 is not missing; /*same as col2 ne " "*/
	where col3 between 150 and 155;
	where col4 like "_I"; * second letter is I, two char in col4;
            where col5 like 'Z%;  * first letter is Z
run;

--- macro variable----------------------
%let varName = value; * don't type strings in quotes

proc print data=dfname;
where categoryVar = "&varName";

%let numVar = 50;
%let StringVar = abc; # this is case sensitive
%letDateVar = 02JAN2018;

PROC PRINT data= df_name;
where val1 >= &numVar and cat1 = "&StringVar" and openDate >= "&DateVar"d;  * double quotes have to be used around macro variables
var id, val1,cat1,opendDate;
run;

---- formatting----
# can format multiple columns via single format statement; format impacts the display, and NOT the raw data values
proc print data = input_table;
format col_name format;
run;

format: <$>format_name <w>.<d> 
w- width, d- decimal places

proc print data= df_name;
format height weight 3. Birthdate date9;
run;
3. - rounds value to nearest wholenumber
date9
5.- Rounds to nearest whole number ( 5 digit values) - 12345.67 becomes 12346
comma8.1- total space for 8 characters, one decimal place - 12,345.7
dollar 10.2 - $12,345.67
dollar 10. $12,346


# https://support.sas.com/en/documentation.html
Can also find this information by following these steps:
Select Programming: SAS 9.4 and Viya.
Under Syntax - Quick Links, select Formats under Language Elements.
Select the link for Zw.d.

# format
proc print data=pg1.storm_summary(obs=20);
	format Lat Lon 4. StartDate EndDate date9.;
run;

proc print data=pg1.storm_summary(obs=20);
	format Lat Lon 4. StartDate EndDate date11.;
run;

proc freq data=pg1.storm_summary order=freq;
	tables StartDate;
	format StartDate monname.;
run;

# to get all SAS files in the library
libname PG1 BASE "EPG1V2/data";
# to see top 15 records
proc print data = pg1.storm_summary (obs=15);
# filter and sort
proc sort data=pg1.storm_summary out= storm_sort;
	where basin in ("NA","na");
	by descending maxwindmph ;
run;

------------------ Removing duplicates----------
-- step 1
proc sort data = df_input out = new_df_name nodupkey dupout = df_duplicate_records; * only 1st row will be kept, in case of duplicates;
by _all_ ;
run;
#dupout stores the duplucates records which get removed

proc sort data= df_name
		  out=df_clean
		  dupout=df_dups
		  nodupkey;
    by _all_;
run;

-- step 2
proc sort data= df_input out= df_min_values;
where col1 is not missing and col2 is not missing;
by descending col3 col2 col1;
run;

-- step 3
proc sort data = df_min_values nodupkey;
by descending col1 col2 col3;
run;

---- Combining sort, where

libname LI1 BASE "path/folder";

proc sort data=li1.df_name out=df_output;
    by col1 descending col2;
    where Type="abc";
run;
# sorts in scedning of col1, desc col2

------- SET -----------------------
DATA output_df_name;  ( TEMP table if we use work library, permanent table if some other library is used)
SET input_df_name;
RUN;

-- the below will create the table in out library ( Just a copy of the df)
data out.df_name;
    set library12.df_name;
run;

You cannot use a SET statement to read unstructured data. (csv)
Any data source that can be read via a library can be used as the input table in the SET statement. ( Excel, SAS tables)

--- df2 gets df post filter
data df2;
set df1;
where col1 > val1;
run;

data df2;
set df1;
where col1 >val1;
keep col1 col2 col3; * subsets col1-3, can also use 'drop' to delete selected columns;
run; 

--- format in data step-----
Format in data step permanently assigns a format to a column

data df2;
set df1;
where col1>val1;
format col2 4.1 col3 3.;
run;

--------------- wd-------------------------------
libname in1 BASE "path/data"; # wd for reading the file
libname out BASE "path/output"; # setting wd for placing output

data out.df2;
	set in1.df1;
	where col1>=156 and Date_col>="01JAN2000"d;
	keep col1 col2 col3;
run;


libname lib1 BASE "path/data";

data df2; ** output df name;
    set lib1.df1; ** input df name;
    where col1 like "2016%"; ** it is character column, where year makes the starting 4 digits;
    format col2 col3 col4 comma17.;
    drop col5;
run;

---------------
libname libIN base "path/data";
libname libOUT base "path/output";

data libOUT.df2;
set libIN.df1;
where category="abc" and common_names like "%xyz%";
drop Category col2 col3 col4; * no "," between column names;
RUN;

--- Import basis filter, then sort
libname out "~/folder/output";

data out.df2;
    set pg1.df1;
    where Category='abc' and Common_Names like '%xyz%' 
        and Common_Names not like '%lmn%';    
    drop Category col2 col3 col4;
run;

proc sort data=out.df2;
    by Common_Names;
run;


/* Common Numeric Functions	What it Does
SUM (num1, num2, ...)	Returns the sum of nonmissing arguments.
MEAN (num1, num2, ...)	Returns the arithmetic mean (average) of nonmissing arguments.
MEDIAN (num1, num2, ...)	Returns the median value of nonmissing arguments.
RANGE (num1, num2, ...)	Returns the range of the nonmissing values.
MIN (num1, num2, ...)	Returns the smallest nonmissing value from a list of arguments.
MAX (num1, num2, ...)	Returns the largest value from a list of arguments.
N (num1, num2, ...)	Returns the number of nonmissing numeric values.
NMISS (num1, num2, ...)	Returns the number of null and SAS missing numeric values.  */

data df2;
    set lib1.df1;
    colAvg=mean(col1, col2, col3, col4);
    colRange=range(of col1-col2);
    newCol = co7 +col8;
run;

Note: you can use the shorthand notation OF col1 - coln to list a range of columns when the columns have the same name and end in a consecutive number.


Character Function	What it Does
UPCASE (char)  LOWCASE(char) 	Changes letters in a character string to uppercase or lowercase
PROPCASE (char,<delimiters>) 	Changes the first letter of each word to uppercase and other letters to lowercase
CATS (char1, char2, ...)	Concatenates character strings and removes leading and trailing blanks from each argument
SUBSTR (char, position, <length>)	Returns a substring from a character string
